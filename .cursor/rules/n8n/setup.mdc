---
description: 
globs: 
alwaysApply: false
---
# Setting Up n8n in Your Turborepo

This guide explains how to set up and use n8n with Docker in your turborepo workflow.

## Overview

[n8n](https://n8n.io/) is a workflow automation platform that allows you to connect various services and automate tasks without coding. In this setup, we're running n8n with PostgreSQL using Docker Compose within a turborepo monorepo structure.

## Prerequisites

- Docker and Docker Compose installed
- pnpm package manager
- Basic understanding of turborepo

## Directory Structure

```
apps/
  └── n8n/
      ├── docker-compose.yml    # Docker configuration
      ├── package.json          # Turborepo integration scripts
      ├── .env.example          # Example environment variables
      └── README.md             # Usage instructions
```

## Setup Process

### 1. Create the n8n Directory

The n8n app has been set up in your apps directory to follow the turborepo structure.

### 2. Configure Environment Variables

```bash
# Navigate to the n8n directory
cd apps/n8n

# Create your .env file from the example
cp .env.example .env
```

Edit the `.env` file to set your desired configuration:

```
# N8N Configuration
N8N_HOST=localhost
TIMEZONE=UTC

# Uncomment and set a secure encryption key for production
# N8N_ENCRYPTION_KEY=your-secure-encryption-key
```

### 3. Start n8n

From the root of your turborepo:

```bash
pnpm --filter n8n start
```

This will start both n8n and PostgreSQL containers. n8n will be available at http://localhost:5678.

## Managing n8n

The package.json includes several scripts to help manage your n8n instance:

| Command | Description |
|---------|-------------|
| `pnpm --filter n8n start` | Start n8n and PostgreSQL containers |
| `pnpm --filter n8n stop` | Stop all containers |
| `pnpm --filter n8n logs` | View container logs |
| `pnpm --filter n8n pull` | Pull the latest n8n image |
| `pnpm --filter n8n update` | Update to the latest n8n version |
| `pnpm --filter n8n clean` | Stop containers and remove volumes |

## Docker Compose Configuration

The `docker-compose.yml` file sets up:

1. **n8n container**:
   - Uses the official n8n image
   - Exposes port 5678
   - Connects to PostgreSQL
   - Mounts a volume for data persistence

2. **PostgreSQL container**:
   - Uses PostgreSQL 14 Alpine image
   - Configures database credentials
   - Mounts a volume for database persistence

## Production Considerations

For production environments:

1. Change the default PostgreSQL credentials in `docker-compose.yml`
2. Set a strong `N8N_ENCRYPTION_KEY` in your `.env` file
3. Configure proper networking and access controls
4. Consider setting up a reverse proxy with SSL

## Troubleshooting

### Container Not Starting

If the containers won't start, check:
- Docker service is running
- No port conflicts on 5678 or 5432
- Sufficient disk space for volumes

### Database Connection Issues

If n8n can't connect to PostgreSQL:
- Ensure PostgreSQL container is running
- Check the database credentials in docker-compose.yml
- Verify the database host is correctly set as "postgres"

## Integration with Other Services

n8n can connect to other services in your turborepo. For local development:

1. Use service names defined in docker-compose files when referencing other services
2. Ensure proper network configuration if using multiple docker-compose files

## Additional Resources

- [n8n Documentation](https://docs.n8n.io/)
- [Docker Compose Documentation](https://docs.docker.com/compose/)
- [Turborepo Documentation](https://turbo.build/repo/docs)